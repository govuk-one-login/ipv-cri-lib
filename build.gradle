plugins {
	id "java-library"
	id "java-test-fixtures"
	id "org.sonarqube"
	id "com.diffplug.spotless"
	id "jacoco"
	id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
	id 'io.freefair.aspectj.post-compile-weaving' version '6.6.3' // https://github.com/freefair/gradle-plugins
}

// please update RELEASE_NOTES.md when you update this version
def buildVersion = "6.4.0"

defaultTasks 'clean', 'spotlessApply', 'build'

ext {
	dependencyVersions = [
		aws_sdk_version          : "2.29.1",
		aws_lambda_events_version: "3.11.6",
		aspectjrt_version        : "1.9.20.1", // https://docs.powertools.aws.dev/lambda/java/#java-compatibility (Java11)
		aws_powertools_version   : "1.18.0",
		jackson_version          : "2.15.2", // Use AWS POM version only
		nimbusds_oauth_version   : "11.4",
		nimbusds_jwt_version     : "9.36",
		junit                    : "5.8.2",
		mockito					 : "4.3.1",
		glassfish_version        : "3.0.3",
		cucumber_version         : "7.9.0",
		opentelemetry_version    : "2.12.0-alpha"
	]
}

repositories {
	maven {
		url 'https://gds.jfrog.io/artifactory/di-allowed-repos'
	}
}

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
	withJavadocJar()
	withSourcesJar()
}

configurations {
	aws
	aws_crt_client
	cloudformation
	dynamodb
	jackson
	lambda
	sqs
	sso
	kms
	acm
	lambda_tests
	lettuce
	nimbus
	ssm
	tests
	test_runtime
	gson
	aspectjrt
	powertools
	mockito
	cucumber
	opentel
}

configurations.all {
	// https://aws.amazon.com/blogs/developer/tuning-the-aws-java-sdk-2-x-to-reduce-startup-time/
	exclude group:"software.amazon.awssdk", module: "apache-client"
	exclude group:"software.amazon.awssdk", module: "netty-nio-client"
}

dependencies {
	aws platform("software.amazon.awssdk:bom:${dependencyVersions.aws_sdk_version}")
	aws_crt_client "software.amazon.awssdk:aws-crt-client:${dependencyVersions.aws_sdk_version}"

	cloudformation "software.amazon.awssdk:cloudformation"

	dynamodb "software.amazon.awssdk:dynamodb",
			"software.amazon.awssdk:dynamodb-enhanced"

	gson "com.google.code.gson:gson:2.8.9"

	lambda "software.amazon.awssdk:lambda",
			"com.amazonaws:aws-lambda-java-events:${dependencyVersions.aws_lambda_events_version}",
			"software.amazon.lambda:powertools-parameters:${dependencyVersions.aws_powertools_version}"

	sqs "software.amazon.awssdk:sqs"

	ssm "software.amazon.awssdk:ssm"

	sso "software.amazon.awssdk:sso",
			"software.amazon.awssdk:ssooidc"

	kms "software.amazon.awssdk:kms"

	acm "software.amazon.awssdk:acm"

	lambda_tests "software.amazon.awssdk:aws-lambda-java-tests:1.1.1"

	jackson "com.fasterxml.jackson.core:jackson-core",
			"com.fasterxml.jackson.core:jackson-databind",
			"com.fasterxml.jackson.core:jackson-annotations",
			"com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${dependencyVersions.jackson_version}",
			"com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${dependencyVersions.jackson_version}",
			"com.github.erosb:everit-json-schema:1.14.4"

	aspectjrt "org.aspectj:aspectjrt:${dependencyVersions.aspectjrt_version}"

	powertools "software.amazon.lambda:powertools-logging:${dependencyVersions.aws_powertools_version}",
			"software.amazon.lambda:powertools-metrics:${dependencyVersions.aws_powertools_version}"

	nimbus "com.nimbusds:oauth2-oidc-sdk:${dependencyVersions.nimbusds_oauth_version}",
			"com.nimbusds:nimbus-jose-jwt:${dependencyVersions.nimbusds_jwt_version}"

	tests "org.junit.jupiter:junit-jupiter-api:${dependencyVersions.junit}",
			"org.junit.jupiter:junit-jupiter-params:${dependencyVersions.junit}",
			"org.mockito:mockito-junit-jupiter:${dependencyVersions.mockito}",
			"org.mockito:mockito-inline:${dependencyVersions.mockito}",
			"org.hamcrest:hamcrest:2.2",
			"uk.org.webcompere:system-stubs-jupiter:2.0.1",
			"uk.org.webcompere:system-stubs-core:2.0.1"

	test_runtime "org.junit.jupiter:junit-jupiter-engine:${dependencyVersions.junit}"

	opentel platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:${dependencyVersions.opentelemetry_version}"),
			"io.opentelemetry.instrumentation:opentelemetry-aws-sdk-2.2"

	cucumber "io.cucumber:cucumber-java:${dependencyVersions.cucumber_version}",
			"io.cucumber:cucumber-picocontainer:${dependencyVersions.cucumber_version}"
}

dependencies {
	implementation configurations.aws,
			configurations.lambda,
			configurations.jackson,
			configurations.dynamodb,
			configurations.aws_crt_client,
			configurations.nimbus,
			configurations.aspectjrt,
			configurations.powertools,
			configurations.sqs,
			configurations.kms,
			configurations.acm,
			configurations.opentel

	testImplementation configurations.tests

	testRuntimeOnly configurations.test_runtime

	testFixturesApi configurations.kms
	testFixturesApi configurations.aws
	testFixturesApi configurations.sqs
	testFixturesApi configurations.aws_crt_client
	testFixturesApi configurations.cloudformation
	testFixturesApi	configurations.cucumber
	testFixturesApi	configurations.aspectjrt
	testFixturesApi configurations.nimbus
	testFixturesApi configurations.ssm

	testFixturesImplementation configurations.jackson
	testFixturesImplementation configurations.tests

	testFixturesRuntimeOnly configurations.sso
}

tasks.named("jar") {
	manifest {
		attributes("Implementation-Title": project.name,
		"Implementation-Version": project.version)
	}
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required.set(true)
	}
}

sonar {
	properties {
		property "sonar.projectKey", "ipv-cri-lib"
		property "sonar.organization", "govuk-one-login"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.cpd.exclusions", "**/di/ipv/cri/common/library/domain/personidentity/Address.java"
	}
}

spotless {
	java {
		target "**/src/**/*.java"
		googleJavaFormat("1.18.1").aosp()
		importOrder "", "javax", "java", "\\#"
		endWithNewline()
	}
	groovyGradle {
		target '**/*.gradle'
		greclipse()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

clean.doFirst {
	delete "${rootDir}/dist/"
	delete "${rootDir}/.aws-sam"
}

gradle.projectsEvaluated {
	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xlint:unchecked"
	}
}

group = "uk.gov.account"
version = "$buildVersion"
