import com.vanniktech.maven.publish.SonatypeHost

plugins {
	alias(libs.plugins.java.library)
	alias(libs.plugins.java.test.fixtures)
	alias(libs.plugins.sonarqube)
	alias(libs.plugins.spotless)
	alias(libs.plugins.jacoco)
	alias(libs.plugins.post.compile.weaving)
	alias(libs.plugins.publishing)
}

// Important: see README on publishing a new version to Maven
def buildVersion = "7.0.0"

defaultTasks 'clean', 'spotlessApply', 'build'

repositories {
	maven {
		url 'https://gds.jfrog.io/artifactory/di-allowed-repos'
	}
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

configurations.configureEach {
	// https://aws.amazon.com/blogs/developer/tuning-the-aws-java-sdk-2-x-to-reduce-startup-time/
	exclude group:"software.amazon.awssdk", module: "apache-client"
	exclude group:"software.amazon.awssdk", module: "netty-nio-client"
}

dependencies {
	implementation platform(libs.aws.bom)
	implementation platform(libs.opentelemetry.bom)

	implementation libs.aws.crt.client
	implementation libs.bundles.aws
	implementation libs.bundles.lambda
	implementation libs.gson
	implementation libs.bundles.jackson
	implementation libs.bundles.powertools
	implementation libs.bundles.nimbus
	implementation libs.aspectjrt
	implementation libs.otel.aws.sdk

	testImplementation libs.bundles.tests
	testRuntimeOnly libs.bundles.test.runtime

	testFixturesApi libs.bundles.aws
	testFixturesApi libs.aws.crt.client
	testFixturesApi libs.cloudformation
	testFixturesApi libs.bundles.cucumber
	testFixturesApi libs.aspectjrt
	testFixturesApi libs.bundles.nimbus
	testFixturesApi libs.ssm

	testFixturesImplementation libs.bundles.jackson
	testFixturesImplementation libs.bundles.tests

	testFixturesRuntimeOnly libs.sso
}

tasks.named("jar") {
	manifest {
		attributes("Implementation-Title": project.name,
		"Implementation-Version": project.version)
	}
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required.set(true)
	}
}

sonar {
	properties {
		property "sonar.projectKey", "ipv-cri-lib"
		property "sonar.organization", "govuk-one-login"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.cpd.exclusions", "**/di/ipv/cri/common/library/domain/personidentity/Address.java"
	}
}

spotless {
	java {
		target "**/src/**/*.java"
		googleJavaFormat("1.18.1").aosp()
		importOrder "", "javax", "java", "\\#"
		endWithNewline()
	}
	groovyGradle {
		target '**/*.gradle'
		greclipse()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

clean.doFirst {
	delete "${rootDir}/dist/"
	delete "${rootDir}/.aws-sam"
}

gradle.projectsEvaluated {
	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xlint:unchecked"
	}
}

group = "uk.gov.account"
version = "$buildVersion"

mavenPublishing {
	publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)

	signAllPublications()

	coordinates(group.toString(), "cri-common-lib", version.toString())

	pom {
		name = "Digital Identity Credential Issuer common libraries"
		description = "Digital Identity Credential Issuer common libraries"
		inceptionYear = "2025"
		url = "https://github.com/govuk-one-login/ipv-cri-lib"
		licenses {
			license {
				name = "MIT License"
				url = "https://github.com/govuk-one-login/ipv-cri-lib/blob/main/LICENSE"
				distribution = "repo"
			}
		}
		developers {
			developer {
				name = "GDS Developers"
			}
		}
		scm {
			url = "https://github.com/govuk-one-login/ipv-cri-lib"
			connection = "scm:git:git://github.com/govuk-one-login/ipv-cri-lib.git"
			developerConnection = "scm:git:ssh://git@github.com/govuk-one-login/ipv-cri-lib.git"
		}
	}
}
